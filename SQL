-- -- Active: 1701846489377@@127.0.0.1@3306@Covid
SELECT * FROM deaths;
SELECT * FROM vaccination;

-- The SQL code creates a table named vaccine_death_rates by calculating the average total vaccinated, death rate, and
-- vaccination rate (total vaccinated / population * 100) for each location. It combines data from the vaccination and 
-- deaths tables using Common Table Expressions (CTEs) and filters out rows where necessary data is missing.
CREATE TABLE vaccine_death_rates AS
WITH TotalVaccination AS (
    SELECT
        iso_code,
        location,
        AVG(people_fully_vaccinated) AS total_vaccinated
    FROM
        vaccination
    GROUP BY
        iso_code, location
), DeathRateCTE AS (
    SELECT    
        iso_code,
        location,
        AVG(population) AS population,
        AVG(total_cases) AS total_cases,
        AVG(total_deaths) AS total_deaths,
        (AVG(total_deaths) / AVG(total_cases)) * 100 AS death_rate
    FROM
        deaths
    GROUP BY
        iso_code, location
)
SELECT 
    TotalVaccination.iso_code,
    TotalVaccination.location,
    DeathRateCTE.death_rate,
    (TotalVaccination.total_vaccinated / DeathRateCTE.population) * 100 AS vaccination_rate
    FROM TotalVaccination INNER JOIN
    DeathRateCTE ON TotalVaccination.iso_code = DeathRateCTE.iso_code
    WHERE TotalVaccination.total_vaccinated IS NOT NULL AND DeathRateCTE.death_rate IS NOT NULL;

SELECT * FROM vaccine_death_rates

-- The SQL statement creates a table named `vaccine_death_time` by combining weekly vaccination and death data. 
-- It utilizes two Common Table Expressions (CTEs) named `WeeklyCases` and `WeeklyDeaths`. The resulting table 
-- employs `LEFT JOIN` to merge the data based on the weekly date.

CREATE TABLE vaccine_death_time AS
WITH WeeklyCases AS (
    SELECT
        iso_code,
        location,
        COALESCE(DATE_FORMAT(MIN(date), '%Y-%m-%d'), 0) AS weekly_date,
        COALESCE(AVG(people_vaccinated), 0) AS people_vaccinated_weekly,
        AVG(people_fully_vaccinated) AS people_fully_vaccinated_weekly
    FROM
        vaccination
    GROUP BY
        iso_code, location, WEEK(date)  -- Include 'location' in the GROUP BY clause
),
WeeklyDeaths AS (
    SELECT
        iso_code,
        location,
        DATE_FORMAT(MIN(date), '%Y-%m-%d') AS weekly_date,
        AVG(total_deaths) AS total_deaths_weekly,
        AVG(total_cases) AS total_cases_weekly
    FROM
        deaths
    GROUP BY
        iso_code, location, WEEK(date)  -- Include 'location' in the GROUP BY clause
)
SELECT
    WeeklyCases.iso_code,
    WeeklyCases.location,
    COALESCE(WeeklyCases.weekly_date, WeeklyDeaths.weekly_date) AS date,
    COALESCE(WeeklyCases.people_vaccinated_weekly, 0) AS people_vaccinated_weekly,
    COALESCE(WeeklyCases.people_fully_vaccinated_weekly, 0) AS people_fully_vaccinated_weekly,
    COALESCE(WeeklyDeaths.total_deaths_weekly, 0) AS total_deaths_weekly,
    COALESCE(WeeklyDeaths.total_cases_weekly, 0) AS total_cases_weekly
FROM WeeklyCases
LEFT JOIN
    WeeklyDeaths ON WeeklyCases.weekly_date = WeeklyDeaths.weekly_date
ORDER BY date ASC;

-- This SQL query brings together information from two tables, one about COVID-19 vaccinations and the other about deaths. 
-- It's designed to give a closer look at different places (locations) and how they've been affected. The query calculates 
-- the average number of people fully vaccinated and total deaths for each location. By using a mix of join operations, it ensures 
-- we get a complete picture even when some data might be missing in one table or the other. This helps us see how 
-- vaccination rates and deaths relate across different places, providing valuable insights into the impact of COVID-19 on various locations.

WITH Vaccination_Location AS (
    SELECT
        iso_code,
        location,
        AVG(people_fully_vaccinated) AS population_vaccination
    FROM
        vaccination
    GROUP BY
        iso_code, location
),
Death_Location AS (
    SELECT
        iso_code,
        location,
        AVG(total_deaths) AS total_deaths
    FROM
        deaths
    GROUP BY
        iso_code, location
)
SELECT
    VL.iso_code,
    VL.location,
    VL.population_vaccination,
    DL.total_deaths
FROM
    Vaccination_Location VL
LEFT JOIN
    Death_Location DL ON VL.iso_code = DL.iso_code AND VL.location = DL.location
UNION
SELECT
    DL.iso_code,
    DL.location,
    VL.population_vaccination,
    DL.total_deaths
FROM
    Vaccination_Location VL
RIGHT JOIN
    Death_Location DL ON VL.iso_code = DL.iso_code AND VL.location = DL.location;
